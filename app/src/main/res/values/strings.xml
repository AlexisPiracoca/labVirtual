<resources>
    <string name="app_name">laboratorioVirtual</string>
    <!-- Strings used for fragments for navigation -->
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>

    <string name="lorem_ipsum">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam in scelerisque sem. Mauris
        volutpat, dolor id interdum ullamcorper, risus dolor egestas lectus, sit amet mattis purus
        dui nec risus. Maecenas non sodales nisi, vel dictum dolor. Class aptent taciti sociosqu ad
        litora torquent per conubia nostra, per inceptos himenaeos. Suspendisse blandit eleifend
        diam, vel rutrum tellus vulputate quis. Aliquam eget libero aliquet, imperdiet nisl a,
        ornare ex. Sed rhoncus est ut libero porta lobortis. Fusce in dictum tellus.\n\n
        Suspendisse interdum ornare ante. Aliquam nec cursus lorem. Morbi id magna felis. Vivamus
        egestas, est a condimentum egestas, turpis nisl iaculis ipsum, in dictum tellus dolor sed
        neque. Morbi tellus erat, dapibus ut sem a, iaculis tincidunt dui. Interdum et malesuada
        fames ac ante ipsum primis in faucibus. Curabitur et eros porttitor, ultricies urna vitae,
        molestie nibh. Phasellus at commodo eros, non aliquet metus. Sed maximus nisl nec dolor
        bibendum, vel congue leo egestas.\n\n
        Sed interdum tortor nibh, in sagittis risus mollis quis. Curabitur mi odio, condimentum sit
        amet auctor at, mollis non turpis. Nullam pretium libero vestibulum, finibus orci vel,
        molestie quam. Fusce blandit tincidunt nulla, quis sollicitudin libero facilisis et. Integer
        interdum nunc ligula, et fermentum metus hendrerit id. Vestibulum lectus felis, dictum at
        lacinia sit amet, tristique id quam. Cras eu consequat dui. Suspendisse sodales nunc ligula,
        in lobortis sem porta sed. Integer id ultrices magna, in luctus elit. Sed a pellentesque
        est.\n\n
        Aenean nunc velit, lacinia sed dolor sed, ultrices viverra nulla. Etiam a venenatis nibh.
        Morbi laoreet, tortor sed facilisis varius, nibh orci rhoncus nulla, id elementum leo dui
        non lorem. Nam mollis ipsum quis auctor varius. Quisque elementum eu libero sed commodo. In
        eros nisl, imperdiet vel imperdiet et, scelerisque a mauris. Pellentesque varius ex nunc,
        quis imperdiet eros placerat ac. Duis finibus orci et est auctor tincidunt. Sed non viverra
        ipsum. Nunc quis augue egestas, cursus lorem at, molestie sem. Morbi a consectetur ipsum, a
        placerat diam. Etiam vulputate dignissim convallis. Integer faucibus mauris sit amet finibus
        convallis.\n\n
        Phasellus in aliquet mi. Pellentesque habitant morbi tristique senectus et netus et
        malesuada fames ac turpis egestas. In volutpat arcu ut felis sagittis, in finibus massa
        gravida. Pellentesque id tellus orci. Integer dictum, lorem sed efficitur ullamcorper,
        libero justo consectetur ipsum, in mollis nisl ex sed nisl. Donec maximus ullamcorper
        sodales. Praesent bibendum rhoncus tellus nec feugiat. In a ornare nulla. Donec rhoncus
        libero vel nunc consequat, quis tincidunt nisl eleifend. Cras bibendum enim a justo luctus
        vestibulum. Fusce dictum libero quis erat maximus, vitae volutpat diam dignissim.
    </string>
    <string name="title_activity_differential_equations">DifferentialEquations</string>
    <string name="title_activity_menu">Menu</string>
    <string name="title_activity_poo_class">PooClass</string>
    <string name="title_activity_estructure_class">EstructureClass</string>
    <string name="title_activity_basic_class">BasicClass</string>
    <string name="title_activity_min_max_class">MinMaxClass</string>
    <string name="title_activity_laplace_class">LaplaceClass</string>
    <string name="activity_week1">ActivityWeek1</string>


    <!-- Brandon -->
    <!-- ejemplo variable  -->
    <string name="codigo_variables">
    <![CDATA[
public class Variables {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\t// Declarar una variable llamada \'edad\' de tipo entero y asignarle el valor\n
\t\t\t\tint edad = 10;\n
\t\t\t\t// Imprimir el valor de la variable \'edad\'\n
\t\t\t\tSystem.out.println("La edad es: " + edad);\n
\t\t\t}\n
}\n
    ]]>
</string>

    <string name="actividad_variable">
    <![CDATA[
public class Variables {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\tint valor = 15;\n
\t\t\t\tSystem.out.println("El valor: " + valor);\n
\t\t\t}\n
}\n
    ]]>
</string>

    <string name="codigo_condicionales">
    <![CDATA[
public class EstructurasCondicionales {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\t// Declarar una variable llamada \'edad\' de tipo entero y asignarle el valor\n
\t\t\t\tint edad = 15;\n
\t\t\t\t// Verificar si la edad es mayor o igual a 18\n
\t\t\t\tif (edad >= 18) {\n
\t\t\t\t\t\tSystem.out.println("Eres mayor de edad.");\n
\t\t\t\t} else {\n
\t\t\t\t\t\tSystem.out.println("Eres menor de edad.");\n
\t\t\t\t}\n
\t\t\t}\n
}\n
    ]]>
</string>

    <string name="ejercicio_condicionales">
    <![CDATA[
public class EstructurasCondicionales {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\tint edad = 18;\n
\t\t\t\tif (edad >= 18) {\n
\t\t\t\t\t\tSystem.out.println("Eres mayor de edad.");\n
\t\t\t\t} else {\n
\t\t\t\t\t\tSystem.out.println("Eres menor de edad.");\n
\t\t\t\t}\n
\t\t\t}\n
}\n
    ]]>
</string>

    <string name="codigo_ciclos">
    <![CDATA[
public class Ciclos {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\t// Imprimir los números del 1 al 5\n
\t\t\t\tfor (int i = 1; i <= 5; i++) {\n
\t\t\t\t\t\tSystem.out.println(i);\n
\t\t\t\t}\n
\t\t\t}\n
}\n
    ]]>
</string>

    <string name="ejercicio_ciclos">
    <![CDATA[
public class Ciclos {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\tfor (int i = 4; i <= 7; i++) {\n
\t\t\t\t\t
\t\t\t\t\t\tSystem.out.println(i);\n
\t\t\t\t}\n
\t\t\t}\n
}\n
    ]]>
</string>

    <string name="codigo_funciones">
    <![CDATA[
public class Funciones {\n
\t\t// Función para sumar dos números\n
\t\tpublic static int sumar(int a, int b) {\n
\t\t\t\treturn a + b;\n
\t\t}\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\t// Llamar a la función sumar y mostrar el resultado\n
\t\t\t\tint resultado = sumar(5, 3);\n
\t\t\t\tSystem.out.println("La suma de 5 y 3 es: " + resultado);\n
\t\t}\n
}\n
    ]]>
</string>

    <string name="ejercicio_funciones">
    <![CDATA[
public class Funciones {\n
\t\tpublic static int sumar(int a, int b) {\n
\t\t\t\treturn a * b;\n
\t\t}\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\tint resultado = sumar(5, 3);\n
\t\t\t\tSystem.out.println("La suma de 5 y 3 es: " + resultado);\n
\t\t}\n
}\n
    ]]>
</string>

    <string name="codigo_arreglos">
    <![CDATA[
public class Arreglos {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\t// Declarar e inicializar un arreglo de números enteros\n
\t\t\t\tint[] numeros = {1, 2, 3, 4, 5};\n
\n
\t\t\t\t// Acceder y mostrar los elementos del arreglo\n
\t\t\t\tfor (int i = 0; i < numeros.length; i++) {\n
\t\t\t\t\t\tSystem.out.println("Elemento en el índice " + i + ": " + numeros[i]);\n
\t\t\t\t}\n
\t\t}\n
}\n
    ]]>
</string>

    <string name="ejercicio_arreglos">
    <![CDATA[
public class Arreglos {\n
\t\tpublic static void main(String[] args) {\n
\t\t\t\t// Declarar e inicializar un arreglo de números enteros\n
\t\t\t\tint[] numeros = {1, 2, 3, 4, 5};\n
\n
\t\t\t\t\t\tSystem.out.println(numero[2]);\n
\t\t\t\t}\n
\t\t}\n
}\n
    ]]>
</string>


    <!-- EJEMPLOS PARA HERENCIA Y POLIMORFISMO -->

    <string name="ejemplo_herencia">class Vehiculo {\n\tString marca;\n\tint año;\n\n\tvoid encender() {\n\t\tSystem.out.println("El vehículo está encendido");\n\t}\n}\n\nclass Coche extends Vehiculo {\n\tint numPuertas;\n\n\tvoid tocarClaxon() {\n\t\tSystem.out.println("El coche está tocando el claxon");\n\t}\n}\n\npublic class HerenciaEjemplo {\n\tpublic static void main(String[] args) {\n\t\tCoche miCoche = new Coche();\n\t\tmiCoche.marca = "Toyota";\n\t\tmiCoche.año = 2021;\n\t\tmiCoche.numPuertas = 4;\n\t\tmiCoche.encender();\n\t\tmiCoche.tocarClaxon();\n\t}\n}</string>
    <string name="ejemplo_polimorfismo">class Animal {\n\tvoid hacerSonido() {\n\t\tSystem.out.println("El animal hace un sonido");\n\t}\n}\n\nclass Perro extends Animal {\n\t@Override\n\tvoid hacerSonido() {\n\t\tSystem.out.println("El perro ladra");\n\t}\n}\n\nclass Gato extends Animal {\n\t@Override\n\tvoid hacerSonido() {\n\t\tSystem.out.println("El gato maúlla");\n\t}\n}\n\npublic class PolimorfismoEjemplo {\n\tpublic static void main(String[] args) {\n\t\tAnimal miAnimal;\n\n\t\tmiAnimal = new Perro();\n\t\tmiAnimal.hacerSonido();\n\n\t\tmiAnimal = new Gato();\n\t\tmiAnimal.hacerSonido();\n\t}\n}</string>


    <!-- Quiz Questions -->
    <string name="question_1">¿De qué clase hereda la clase `Coche`?</string>
    <string name="question_2">¿Qué método se hereda de la clase `Vehículo` a la clase `Coche`?</string>
    <string name="question_3">Si tienes un objeto `Animal` que es una instancia de `Perro`, ¿qué sonido hará?</string>
    <string name="question_4">Si cambias la instancia del objeto `Animal` a `Gato` y llamas al método `hacerSonido()`, ¿qué resultado obtendrás?</string>

    <!-- Quiz Options for Question 1 -->
    <string-array name="options_question_1">
        <item>Vehículo</item>
        <item>Animal</item>
        <item>Persona</item>
        <item>Ninguna de las anteriores</item>
    </string-array>

    <!-- Quiz Options for Question 2 -->
    <string-array name="options_question_2">
        <item>encender()</item>
        <item>tocarClaxon()</item>
        <item>hacerSonido()</item>
        <item>maullar()</item>
    </string-array>

    <!-- Quiz Options for Question 3 -->
    <string-array name="options_question_3">
        <item>El perro ladra</item>
        <item>El gato maúlla</item>
        <item>El animal hace un sonido</item>
        <item>Ninguna de las anteriores</item>
    </string-array>

    <!-- Quiz Options for Question 4 -->
    <string-array name="options_question_4">
        <item>El perro ladra</item>
        <item>El gato maúlla</item>
        <item>El animal hace un sonido</item>
        <item>Ninguna de las anteriores</item>
    </string-array>


    <!-- EJEMPLOS PARA ENCAPSULAMIENTO  Y MODIFICADORES DE ACCESO -->

    <string name="ejemplo_encapsulamiento">
class Coche {\n
\tprivate String marca;\n
\tprivate String modelo;\n\n
\tpublic Coche(String marca, String modelo) {\n
\t\tthis.marca = marca;\n
\t\tthis.modelo = modelo;\n
\t}\n\n
\tpublic String obtenerInfo() {\n
\t\treturn "Marca: " + marca + ", Modelo: " + modelo;\n
\t}\n\n
\tpublic void actualizarModelo(String nuevoModelo) {\n
\t\tthis.modelo = nuevoModelo;\n
\t}\n
}\n\n
public class EncapsulamientoEjemplo {\n
\tpublic static void main(String[] args) {\n
\t\tCoche miCoche = new Coche("Toyota", "Corolla");\n\n
\t\tSystem.out.println(miCoche.obtenerInfo()); // Marca: Toyota, Modelo: Corolla\n\n
\t\tmiCoche.actualizarModelo("Camry");\n\n
\t\tSystem.out.println(miCoche.obtenerInfo()); // Marca: Toyota, Modelo: Camry\n\n
\t}\n
}
</string>

    <string name="tipos_modificadores_acceso">
class Ejemplo {\n
\tpublic String atributoPublico;\n
\tprotected String atributoProtegido;\n
\tprivate String atributoPrivado;\n\n
\tpublic Ejemplo(String publico, String protegido, String privado) {\n\n
\t\tthis.atributoPublico = publico;\n
\t\tthis.atributoProtegido = protegido;\n
\t\tthis.atributoPrivado = privado;\n
\t}\n\n
\tpublic String metodoPublico() {\n
\t\treturn "Este es un método público";\n
\t}\n\n
\tprotected String metodoProtegido() {\n
\t\treturn "Este es un método protegido";\n
\t}\n\n
\tprivate String metodoPrivado() {\n
\t\treturn "Este es un método privado";\n
\t}\n
}\n\n
public class ModificadoresAcceso {\n
\tpublic static void main(String[] args) {\n
\t\tEjemplo obj = new Ejemplo("valor público", "valor protegido", "valor privado");\n\n
\t\t// Acceso a atributos\n\n
\t\tSystem.out.println(obj.atributoPublico);  // Acceso permitido: valor público\n\n
\t\tSystem.out.println(obj.atributoProtegido);  // Acceso permitido dentro del mismo paquete o subclase: valor protegido\n\n
\t\t// System.out.println(obj.atributoPrivado);  // Error: atributo privado no accesible directamente\n\n
\t\t// Acceso a métodos\n\n
\t\tSystem.out.println(obj.metodoPublico());  // Acceso permitido: Este es un método público\n\n
\t\tSystem.out.println(obj.metodoProtegido());  // Acceso permitido dentro del mismo paquete o subclase: Este es un método protegido\n\n
\t\t// System.out.println(obj.metodoPrivado());  // Error: método privado no accesible directamente\n\n
\t}\n
}
</string>

    <!-- DIFERENCIAS CLASES ABSTRACTAS Y INTERFACES -->

    <string name="Diferencias_interfaces_clases">

        Interfaces: Todos los métodos son abstractos (sin implementación) y
        las clases pueden implementar múltiples interfaces.   Son esenciales para
        crear código desacoplado y permitir la implementación de múltiples comportamientos
        en diferentes clases. \n\n

        Clases Abstractas: Pueden contener tanto métodos abstractos como métodos con
        implementación y las clases pueden heredar de una sola clase abstracta.
        Las clases abstractas son útiles para compartir código común entre varias clases y definir
        una estructura base para futuras extensiones.
    </string>

    <!-- EJEMPLO INTERFAZ Y CLASES ABSTRACTAS -->

    <string name="ejemplo_interfaz">
// Definición de la interfaz\n
interface Volador {\n
\tvoid volar();\n
}\n\n
// Clase que implementa la interfaz\n
class Pajaro implements Volador {\n
\t@Override\n
\tpublic void volar() {\n
\t\tSystem.out.println("El pájaro está volando");\n
\t}\n
}\n\n
// Clase que utiliza la interfaz\n
public class EjemploInterfaz {\n
\tpublic static void main(String[] args) {\n
\t\tPajaro miPajaro = new Pajaro();\n\n
\t\tmiPajaro.volar();  // Salida: El pájaro está volando\n
\t}\n\n\n\n\n\n
        // Definición de la clase abstracta\n
abstract class Figura {\n
\tprotected double lado;\n\n
\tpublic Figura(double lado) {\n
\t\tthis.lado = lado;\n
\t}\n\n
\t// Método abstracto que debe ser implementado por las subclases\n
\tabstract double calcularArea();\n
}\n\n
// Subclase que extiende la clase abstracta\n
class Cuadrado extends Figura {\n
\tpublic Cuadrado(double lado) {\n
\t\tsuper(lado);\n
\t}\n\n
\t// Implementación del método abstracto\n
\t@Override\n
\tdouble calcularArea() {\n
\t\treturn lado * lado;\n
\t}\n
}\n\n
// Subclase adicional que extiende la clase abstracta\n
class Circulo extends Figura {\n
\tpublic Circulo(double radio) {\n
\t\tsuper(radio);\n
\t}\n\n
\t// Implementación del método abstracto\n
\t@Override\n
\tdouble calcularArea() {\n
\t\treturn Math.PI * lado * lado;\n
\t}\n
}\n\n
// Clase que utiliza las subclases\n
public class EjemploClaseAbstracta {\n
\tpublic static void main(String[] args) {\n
\t\tCuadrado cuadrado = new Cuadrado(5);\n
\t\tCirculo circulo = new Circulo(3);\n\n
\t\tSystem.out.println("Área del cuadrado: " + cuadrado.calcularArea());  // Salida: Área del cuadrado: 25.0\n\n
\t\tSystem.out.println("Área del círculo: " + circulo.calcularArea());    // Salida: Área del círculo: 28.274333882308138\n\n
\t}\n
}
}
</string>

    <!-- ERRORES COMUNES -->
    <string name="errores_comunes">
        1. Errores de Sintaxis (Syntax Errors):\n
   Estos errores ocurren cuando el código viola las reglas gramaticales del lenguaje Java. \n
   Ejemplo: Falta un punto y coma al final de una declaración, se usan paréntesis que no están balanceados, etc.\n\n

2. Errores de Tiempo de Ejecución (Runtime Errors):\n
   Estos errores ocurren durante la ejecución del programa y son causados por condiciones que ocurren en tiempo de ejecución.\n
   Ejemplo: División por cero, acceso a un índice inválido en un array, referencia a un objeto nulo, etc.\n\n

3. Errores de Lógica (Logic Errors):\n
   Estos errores ocurren cuando el programa no produce los resultados esperados debido a un error en el diseño o la lógica del programa.\n
   Ejemplo: Un algoritmo que produce resultados incorrectos debido a una implementación incorrecta.\n\n

4. Errores de Semántica (Semantic Errors):\n
   Estos errores ocurren cuando el código compila sin errores, pero produce resultados no deseados debido a una comprensión incorrecta de los requisitos del programa.\n
   Ejemplo: La interpretación incorrecta de los requisitos del cliente puede llevar a la implementación de una funcionalidad incorrecta.\n\n

</string>


    <string name="gestion_errores_java">

Gestión de Errores en Java:\n

1. Declaración try-catch:\n
   La declaración try-catch se utiliza para manejar excepciones en Java. El código propenso a errores se coloca dentro del bloque try y las excepciones se manejan en uno o más bloques catch.\n\n
   Ejemplo:\n
     ```java\n
     try {\n
          \t// Código propenso a errores\n
     } catch (Excepcion1 e) {\n
         \t// Manejar la excepción Excepcion1\n
     } catch (Excepcion2 e) {\n
         \t// Manejar la excepción Excepcion2\n
     } finally {
         \t// Bloque opcional que se ejecuta siempre, incluso si no se produce una excepción\n
     }\n\n


2. Declaración throw:\n
    La declaración throw se utiliza para lanzar una excepción manualmente dentro de un método.\n\n
   Ejemplo:\n
     ```java\n
     void metodo() throws MiExcepcion {\n
         \tif (condicion) {\n
             \t\tthrow new MiExcepcion("Mensaje de error");\n
         \t}\n
     }\n\n


3. Cláusula finally:\n
   La cláusula finally se utiliza para ejecutar un bloque de código después de que se complete el bloque try-catch, independientemente de si se produce una excepción o no.\n\n
   Ejemplo:\n
     ```java\n
     try {\n
         \t// Código propenso a erroresv
     } catch (Excepcion e) {\n
         \t// Manejar la excepción\n
     } finally {\n
         \t// Código que se ejecuta siempre\n
     }\n\n


4. Creación de Excepciones Personalizadas:
   En Java, es posible crear excepciones personalizadas extendiendo la clase Exception o alguna de sus subclases, como RuntimeException.\n\n
   Ejemplo:\n
     ```java\n
     class MiExcepcion extends Exception {\n
         \tpublic MiExcepcion(String mensaje) {v
             \t\tsuper(mensaje);\n
         \t}v
     }\n\n

</string>
</resources>